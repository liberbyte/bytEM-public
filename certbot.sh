#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# Load environment
source .env.bytem

BYTEM_DOMAIN=${EXCHANGE_SERVER_HOSTNAME}
MATRIX_DOMAIN=${MATRIX_SERVER_NAME}
EMAIL="${SSL_EMAIL:-admin@${DOMAIN_NAME:-example.com}}"

echo -e "${CYAN}BytEM SSL Setup${NC}"
echo -e "${CYAN}BYTEM: ${BYTEM_DOMAIN}${NC}"
echo -e "${CYAN}Matrix: ${MATRIX_DOMAIN}${NC}"

# Create directories
mkdir -p "./certbot/conf/live/${BYTEM_DOMAIN}"
mkdir -p "./certbot/conf/live/${MATRIX_DOMAIN}"
mkdir -p "./certbot/www/.well-known/acme-challenge"

# Check if local development or production
if [[ "$BYTEM_DOMAIN" == *"localhost"* ]] || [[ "$BYTEM_DOMAIN" == *".local"* ]]; then
    echo -e "${YELLOW}Development mode - using self-signed certificates${NC}"
    
    # Generate self-signed certificates for BYTEM domain
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout "./certbot/conf/live/${BYTEM_DOMAIN}/privkey.pem" \
        -out "./certbot/conf/live/${BYTEM_DOMAIN}/fullchain.pem" \
        -subj "/C=US/ST=State/L=City/O=BytEM/CN=${BYTEM_DOMAIN}" 2>/dev/null
    
    # Generate self-signed certificates for Matrix domain
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout "./certbot/conf/live/${MATRIX_DOMAIN}/privkey.pem" \
        -out "./certbot/conf/live/${MATRIX_DOMAIN}/fullchain.pem" \
        -subj "/C=US/ST=State/L=City/O=BytEM/CN=${MATRIX_DOMAIN}" 2>/dev/null
    
    CERT_PATH="/etc/letsencrypt/live/${BYTEM_DOMAIN}"
    MATRIX_CERT_PATH="/etc/letsencrypt/live/${MATRIX_DOMAIN}"
else
    echo -e "${YELLOW}Production - Let's Encrypt certificates${NC}"
    
    # Ensure webroot is accessible
    chmod -R 755 "./certbot/www"
    
    # Check if certificates already exist
    if [ -f "./certbot/conf/live/${BYTEM_DOMAIN}/fullchain.pem" ] && [ -f "./certbot/conf/live/${BYTEM_DOMAIN}/privkey.pem" ]; then
        echo -e "${GREEN}Existing certificates found, skipping renewal${NC}"
        CERT_PATH="/etc/letsencrypt/live/${BYTEM_DOMAIN}"
        MATRIX_CERT_PATH="/etc/letsencrypt/live/${BYTEM_DOMAIN}"
    else
        # Try Let's Encrypt with better error handling
        echo -e "${YELLOW}Attempting Let's Encrypt certificate for ${BYTEM_DOMAIN} and ${MATRIX_DOMAIN}${NC}"
        
        if docker run --rm \
            -v "${PWD}/certbot/conf:/etc/letsencrypt" \
            -v "${PWD}/certbot/www:/var/www/certbot" \
            certbot/certbot certonly \
            --webroot \
            --webroot-path=/var/www/certbot \
            --email "$EMAIL" \
            --agree-tos \
            --no-eff-email \
            --non-interactive \
            --verbose \
            -d "$BYTEM_DOMAIN" \
            -d "$MATRIX_DOMAIN"; then
            
            echo -e "${GREEN}Let's Encrypt certificates obtained successfully${NC}"
            
            # Use the correct certificate path that matches docker-compose mount
            CERT_PATH="/etc/letsencrypt/live/${BYTEM_DOMAIN}"
            MATRIX_CERT_PATH="/etc/letsencrypt/live/${BYTEM_DOMAIN}"
            
            # Verify certificates exist locally
            if [ ! -f "./certbot/conf/live/${BYTEM_DOMAIN}/fullchain.pem" ]; then
                echo -e "${RED}Certificate files not found after successful generation${NC}"
                exit 1
            fi
        else
            echo -e "${RED}❌ Let's Encrypt certificate generation failed${NC}"
            echo -e "${RED}Please check:${NC}"
            echo -e "${RED}1. Domain ${BYTEM_DOMAIN} points to this server${NC}"
            echo -e "${RED}2. Port 80 is accessible for HTTP validation${NC}"
            echo -e "${RED}3. No rate limiting from Let's Encrypt${NC}"
            exit 1
        fi
    fi
fi

echo -e "${YELLOW}Using certificate paths:${NC}"
echo -e "${YELLOW}BYTEM: ${CERT_PATH}${NC}"
echo -e "${YELLOW}Matrix: ${MATRIX_CERT_PATH}${NC}"

# Generate nginx configs with dynamic certificate path
if [ -f "config_templates/nginx_config_templates/bytem.template" ]; then
    sed -e "s/\${BYTEM_DOMAIN}/$BYTEM_DOMAIN/g" \
        -e "s|\${CERT_PATH}|$CERT_PATH|g" \
        config_templates/nginx_config_templates/bytem.template > \
        generated_config_files/nginx_config/${BYTEM_DOMAIN}.conf
    echo -e "${GREEN}Generated BYTEM nginx config${NC}"
fi

if [ -f "config_templates/nginx_config_templates/matrix.bytem.template" ]; then
    sed -e "s/\${MATRIX_DOMAIN}/$MATRIX_DOMAIN/g" \
        -e "s|\${CERT_PATH}|$MATRIX_CERT_PATH|g" \
        config_templates/nginx_config_templates/matrix.bytem.template > \
        generated_config_files/nginx_config/matrix.${BYTEM_DOMAIN}.conf
    echo -e "${GREEN}Generated Matrix nginx config${NC}"
fi

# Test and reload nginx if container is running
if docker ps | grep -q "bytem-app"; then
    echo -e "${YELLOW}Testing nginx configuration...${NC}"
    if docker exec bytem-app nginx -t 2>/dev/null; then
        echo -e "${GREEN}Nginx config test passed, reloading...${NC}"
        docker exec bytem-app nginx -s reload 2>/dev/null || echo -e "${YELLOW}Nginx reload failed, will restart container${NC}"
    else
        echo -e "${YELLOW}Nginx config test failed, will restart container${NC}"
    fi
fi

echo -e "${GREEN}✅ SSL Setup Complete${NC}"
echo -e "${CYAN}Certificate Path: ${CERT_PATH}${NC}"
echo -e "${CYAN}BYTEM: https://${BYTEM_DOMAIN}${NC}"
echo -e "${CYAN}Matrix: https://${MATRIX_DOMAIN}${NC}"
